// GENERATED BY AMAR SCRIPT â€“ EDIT MODEL
import 'package:equatable/equatable.dart';
import '../../../core/enums/stock_status.dart';
import 'stock_movement.dart';

enum StockDurabilityType {
  perishable, // e.g. food, medicine
  nonPerishable, // e.g. electronics, furniture
  durable, // e.g. machinery, vehicles
  consumable, // e.g. office supplies, cleaning products
}

class Stock extends Equatable {
  final String id;
  final String name;
  final String sku;
  final int quantity;
  final StockStatus status;
  final StockDurabilityType durabilityType;

  final String? description;
  final String? categoryId;
  final String? supplierId;
  final String? unit;
  final String? location;

  final int? minimumStock;
  final int? maximumStock;
  final int? averageDailyUsage;
  final int? leadTimeDays;
  final int? safetyStock;
  final int? reorderPoint;
  final int? preferredReorderQuantity;

  final double? price;
  final double? costPrice;

  final DateTime createdAt;
  final DateTime updatedAt;

  final DateTime? expiryDate;
  final DateTime? lastSoldDate;
  final Duration? deadstockThreshold;

  final Map<String, int>? warehouseStock;
  final List<StockMovement>? movementHistory;
  final List<String>? tags;

  const Stock({
    required this.id,
    required this.name,
    required this.sku,
    required this.quantity,
    required this.status,
    required this.durabilityType,
    this.description,
    this.categoryId,
    this.supplierId,
    this.unit,
    this.location,
    this.minimumStock,
    this.maximumStock,
    this.averageDailyUsage,
    this.leadTimeDays,
    this.safetyStock,
    this.reorderPoint,
    this.preferredReorderQuantity,
    this.price,
    this.costPrice,
    required this.createdAt,
    required this.updatedAt,
    this.expiryDate,
    this.lastSoldDate,
    this.deadstockThreshold,
    this.warehouseStock,
    this.movementHistory,
    this.tags,
  });

  Stock copyWith({
    String? id,
    String? name,
    String? sku,
    int? quantity,
    StockStatus? status,
    StockDurabilityType? durabilityType,
    String? description,
    String? categoryId,
    String? supplierId,
    String? unit,
    String? location,
    int? minimumStock,
    int? maximumStock,
    int? averageDailyUsage,
    int? leadTimeDays,
    int? safetyStock,
    int? reorderPoint,
    int? preferredReorderQuantity,
    double? price,
    double? costPrice,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? expiryDate,
    DateTime? lastSoldDate,
    Duration? deadstockThreshold,
    Map<String, int>? warehouseStock,
    List<StockMovement>? movementHistory,
    List<String>? tags,
  }) {
    return Stock(
      id: id ?? this.id,
      name: name ?? this.name,
      sku: sku ?? this.sku,
      quantity: quantity ?? this.quantity,
      status: status ?? this.status,
      durabilityType: durabilityType ?? this.durabilityType,
      description: description ?? this.description,
      categoryId: categoryId ?? this.categoryId,
      supplierId: supplierId ?? this.supplierId,
      unit: unit ?? this.unit,
      location: location ?? this.location,
      minimumStock: minimumStock ?? this.minimumStock,
      maximumStock: maximumStock ?? this.maximumStock,
      averageDailyUsage: averageDailyUsage ?? this.averageDailyUsage,
      leadTimeDays: leadTimeDays ?? this.leadTimeDays,
      safetyStock: safetyStock ?? this.safetyStock,
      reorderPoint: reorderPoint ?? this.reorderPoint,
      preferredReorderQuantity:
          preferredReorderQuantity ?? this.preferredReorderQuantity,
      price: price ?? this.price,
      costPrice: costPrice ?? this.costPrice,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      expiryDate: expiryDate ?? this.expiryDate,
      lastSoldDate: lastSoldDate ?? this.lastSoldDate,
      deadstockThreshold: deadstockThreshold ?? this.deadstockThreshold,
      warehouseStock: warehouseStock ?? this.warehouseStock,
      movementHistory: movementHistory ?? this.movementHistory,
      tags: tags ?? this.tags,
    );
  }

  @override
  List<Object?> get props => [
    id,
    name,
    sku,
    quantity,
    status,
    durabilityType,
    description,
    categoryId,
    supplierId,
    unit,
    location,
    minimumStock,
    maximumStock,
    averageDailyUsage,
    leadTimeDays,
    safetyStock,
    reorderPoint,
    preferredReorderQuantity,
    price,
    costPrice,
    createdAt,
    updatedAt,
    expiryDate,
    lastSoldDate,
    deadstockThreshold,
    warehouseStock,
    movementHistory,
    tags,
  ];
}
