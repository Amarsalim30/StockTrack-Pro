// GENERATED BY AMAR SCRIPT â€“ EDIT MODEL
import 'package:equatable/equatable.dart';

enum StockTakeStatus { pending, inProgress, completed }

class StockTake extends Equatable {
  final String id;
  final String name;
  final String? description;
  final DateTime startDate;
  final DateTime? endDate;
  final StockTakeStatus status;
  final String createdBy;
  final String assignedTo;
  final String? locationId;
  final List<String>? categoryFilters;
  final int totalItems;
  final int countedItems;
  final int discrepancies;
  final Map<String, dynamic>? metadata;
  final DateTime createdAt;
  final DateTime updatedAt;

  const StockTake({
    required this.id,
    required this.name,
    this.description,
    required this.startDate,
    this.endDate,
    required this.status,
    required this.createdBy,
    required this.assignedTo,
    this.locationId,
    this.categoryFilters,
    required this.totalItems,
    required this.countedItems,
    required this.discrepancies,
    this.metadata,
    required this.createdAt,
    required this.updatedAt,
  });

  StockTake copyWith({
    String? id,
    String? name,
    String? description,
    DateTime? startDate,
    DateTime? endDate,
    StockTakeStatus? status,
    String? createdBy,
    String? assignedTo,
    String? locationId,
    List<String>? categoryFilters,
    int? totalItems,
    int? countedItems,
    int? discrepancies,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return StockTake(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      startDate: startDate ?? this.startDate,
      endDate: endDate ?? this.endDate,
      status: status ?? this.status,
      createdBy: createdBy ?? this.createdBy,
      assignedTo: assignedTo ?? this.assignedTo,
      locationId: locationId ?? this.locationId,
      categoryFilters: categoryFilters ?? this.categoryFilters,
      totalItems: totalItems ?? this.totalItems,
      countedItems: countedItems ?? this.countedItems,
      discrepancies: discrepancies ?? this.discrepancies,
      metadata: metadata ?? this.metadata,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  List<Object?> get props => [
    id,
    name,
    description,
    startDate,
    endDate,
    status,
    createdBy,
    assignedTo,
    locationId,
    categoryFilters,
    totalItems,
    countedItems,
    discrepancies,
    metadata,
    createdAt,
    updatedAt,
  ];
}

class StockTakeItem extends Equatable {
  final String id;
  final String stockTakeId;
  final String productId;
  final String productName;
  final String productCode;
  final int systemQuantity;
  final int? countedQuantity;
  final String? countMethod;
  final String? countedBy;
  final DateTime? countedAt;
  final String? notes;
  final List<String>? photoUrls;
  final Map<String, dynamic>? metadata;

  const StockTakeItem({
    required this.id,
    required this.stockTakeId,
    required this.productId,
    required this.productName,
    required this.productCode,
    required this.systemQuantity,
    this.countedQuantity,
    this.countMethod,
    this.countedBy,
    this.countedAt,
    this.notes,
    this.photoUrls,
    this.metadata,
  });

  StockTakeItem copyWith({
    String? id,
    String? stockTakeId,
    String? productId,
    String? productName,
    String? productCode,
    int? systemQuantity,
    int? countedQuantity,
    String? countMethod,
    String? countedBy,
    DateTime? countedAt,
    String? notes,
    List<String>? photoUrls,
    Map<String, dynamic>? metadata,
  }) {
    return StockTakeItem(
      id: id ?? this.id,
      stockTakeId: stockTakeId ?? this.stockTakeId,
      productId: productId ?? this.productId,
      productName: productName ?? this.productName,
      productCode: productCode ?? this.productCode,
      systemQuantity: systemQuantity ?? this.systemQuantity,
      countedQuantity: countedQuantity ?? this.countedQuantity,
      countMethod: countMethod ?? this.countMethod,
      countedBy: countedBy ?? this.countedBy,
      countedAt: countedAt ?? this.countedAt,
      notes: notes ?? this.notes,
      photoUrls: photoUrls ?? this.photoUrls,
      metadata: metadata ?? this.metadata,
    );
  }

  @override
  List<Object?> get props => [
    id,
    stockTakeId,
    productId,
    productName,
    productCode,
    systemQuantity,
    countedQuantity,
    countMethod,
    countedBy,
    countedAt,
    notes,
    photoUrls,
    metadata,
  ];
}
