// GENERATED BY AMAR SCRIPT â€“ EDIT MODEL
import 'package:json_annotation/json_annotation.dart';
import 'package:equatable/equatable.dart';
import '../../../domain/entities/stock/stock.dart';
import '../../../domain/entities/stock/stock_movement.dart';
import '../../../core/enums/stock_status.dart';
import 'stock_movement_model.dart';
import '../../mappers/stock/stock_movement_mapper.dart';

part 'stock_model.g.dart';

@JsonSerializable(explicitToJson: true)
class StockModel extends Equatable {
  final String id;
  final String name;
  final String sku;
  final int quantity;
  final StockStatus status;
  final StockDurabilityType durabilityType;

  final String? description;
  final String? categoryId;
  final String? supplierId;
  final String? unit;
  final String? location;

  final int? minimumStock;
  final int? maximumStock;
  final int? averageDailyUsage;
  final int? leadTimeDays;
  final int? safetyStock;
  final int? reorderPoint;
  final int? preferredReorderQuantity;

  final double? price;
  final double? costPrice;

  final DateTime createdAt;
  final DateTime updatedAt;

  final DateTime? expiryDate;
  final DateTime? lastSoldDate;
  @JsonKey(fromJson: _durFromJson, toJson: _durToJson)
  final Duration? deadstockThreshold;

  final Map<String, int>? warehouseStock;
  @JsonKey(fromJson: _movementHistoryFromJson, toJson: _movementHistoryToJson)
  final List<StockMovement>? movementHistory;
  final List<String>? tags;
  
  const StockModel({
    required this.id,
    required this.name,
    required this.sku,
    required this.quantity,
    required this.status,
    required this.durabilityType,

    this.description,
    this.categoryId,
    this.supplierId,
    this.unit,
    this.location,

    this.minimumStock,
    this.maximumStock,

    this.averageDailyUsage,
    this.leadTimeDays,
    this.safetyStock,
    this.reorderPoint,
    this.preferredReorderQuantity,

    this.price,
    this.costPrice,

    required this.createdAt,
    required this.updatedAt,

    this.expiryDate,
    this.lastSoldDate,
    this.deadstockThreshold,

    this.warehouseStock,
    this.movementHistory,
    this.tags,
  });

  // Computed properties
  bool get isLowStock {
    if (minimumStock == null) return false;
    return quantity <= minimumStock!;
  }

  bool get needsReorder {
    if (reorderPoint == null) return false;
    return quantity <= reorderPoint!;
  }

  factory StockModel.fromJson(Map<String, dynamic> json) =>
      _$StockModelFromJson(json);

  Map<String, dynamic> toJson() => _$StockModelToJson(this);

  /// Map to domain entity
  Stock toEntity() => Stock(
    id: id,
    name: name,
    sku: sku,
    quantity: quantity,
    status: status,
    durabilityType: durabilityType,
    description: description,
    categoryId: categoryId,
    supplierId: supplierId,
    unit: unit,
    location: location,
    minimumStock: minimumStock,
    maximumStock: maximumStock,
    averageDailyUsage: averageDailyUsage,
    leadTimeDays: leadTimeDays,
    safetyStock: safetyStock,
    reorderPoint: reorderPoint,
    preferredReorderQuantity: preferredReorderQuantity,
    price: price,
    costPrice: costPrice,
    createdAt: createdAt,
    updatedAt: updatedAt,
    expiryDate: expiryDate,
    lastSoldDate: lastSoldDate,
    deadstockThreshold: deadstockThreshold,
    warehouseStock: warehouseStock,
    movementHistory: movementHistory,
    tags: tags,
  );

  /// Create from domain entity
  static StockModel fromDomain(Stock ent) => StockModel(
    id: ent.id,
    name: ent.name,
    sku: ent.sku,
    quantity: ent.quantity,
    status: ent.status,
    durabilityType: ent.durabilityType,
    description: ent.description,
    categoryId: ent.categoryId,
    supplierId: ent.supplierId,
    unit: ent.unit,
    location: ent.location,
    minimumStock: ent.minimumStock,
    maximumStock: ent.maximumStock,
    averageDailyUsage: ent.averageDailyUsage,
    leadTimeDays: ent.leadTimeDays,
    safetyStock: ent.safetyStock,
    reorderPoint: ent.reorderPoint,
    preferredReorderQuantity: ent.preferredReorderQuantity,
    price: ent.price,
    costPrice: ent.costPrice,
    createdAt: ent.createdAt,
    updatedAt: ent.updatedAt,
    expiryDate: ent.expiryDate,
    lastSoldDate: ent.lastSoldDate,
    deadstockThreshold: ent.deadstockThreshold,
    warehouseStock: ent.warehouseStock,
    movementHistory: ent.movementHistory,
    tags: ent.tags,
  );

  StockModel copyWith({
    String? id,
    String? name,
    String? sku,
    int? quantity,
    StockStatus? status,
    StockDurabilityType? durabilityType,
    String? description,
    String? categoryId,
    String? supplierId,
    String? unit,
    String? location,
    int? minimumStock,
    int? maximumStock,
    int? averageDailyUsage,
    int? leadTimeDays,
    int? safetyStock,
    int? reorderPoint,
    int? preferredReorderQuantity,
    double? price,
    double? costPrice,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? expiryDate,
    DateTime? lastSoldDate,
    Duration? deadstockThreshold,
    Map<String, int>? warehouseStock,
    List<StockMovement>? movementHistory,
    List<String>? tags,
  }) {
    return StockModel(
      id: id ?? this.id,
      name: name ?? this.name,
      sku: sku ?? this.sku,
      quantity: quantity ?? this.quantity,
      status: status ?? this.status,
      durabilityType: durabilityType ?? this.durabilityType,
      description: description ?? this.description,
      categoryId: categoryId ?? this.categoryId,
      supplierId: supplierId ?? this.supplierId,
      unit: unit ?? this.unit,
      location: location ?? this.location,
      minimumStock: minimumStock ?? this.minimumStock,
      maximumStock: maximumStock ?? this.maximumStock,
      averageDailyUsage: averageDailyUsage ?? this.averageDailyUsage,
      leadTimeDays: leadTimeDays ?? this.leadTimeDays,
      safetyStock: safetyStock ?? this.safetyStock,
      reorderPoint: reorderPoint ?? this.reorderPoint,
      preferredReorderQuantity: preferredReorderQuantity ??
          this.preferredReorderQuantity,
      price: price ?? this.price,
      costPrice: costPrice ?? this.costPrice,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      expiryDate: expiryDate ?? this.expiryDate,
      lastSoldDate: lastSoldDate ?? this.lastSoldDate,
      deadstockThreshold: deadstockThreshold ?? this.deadstockThreshold,
      warehouseStock: warehouseStock ?? this.warehouseStock,
      movementHistory: movementHistory ?? this.movementHistory,
      tags: tags ?? this.tags,
    );
  }

  @override
  List<Object?> get props =>
      [
        id,
        name,
        sku,
        quantity,
        status,
        durabilityType,
        description,
        categoryId,
        supplierId,
        unit,
        location,
        minimumStock,
        maximumStock,
        averageDailyUsage,
        leadTimeDays,
        safetyStock,
        reorderPoint,
        preferredReorderQuantity,
        price,
        costPrice,
        createdAt,
        updatedAt,
        expiryDate,
        lastSoldDate,
        deadstockThreshold,
        warehouseStock,
        movementHistory,
        tags,
      ];

  // Helper methods for JSON conversion
  static Duration? _durFromJson(int? days) =>
      days == null ? null : Duration(days: days);

  static int? _durToJson(Duration? d) => d?.inDays;

  static List<StockMovement>? _movementHistoryFromJson(List<dynamic>? json) {
    if (json == null) return null;
    return json.map((e) =>
        StockMovementMapper.toEntity(
            StockMovementModel.fromJson(e as Map<String, dynamic>))).toList();
  }

  static List<Map<String, dynamic>>? _movementHistoryToJson(
      List<StockMovement>? movements) {
    if (movements == null) return null;
    return movements.map((e) =>
        StockMovementMapper.fromEntity(e).toJson()).toList();
  }
}
