// GENERATED BY AMAR SCRIPT â€“ EDIT MODEL
import 'package:json_annotation/json_annotation.dart';
import '../../../domain/entities/stock/stock.dart';

part 'stock_model.g.dart';

@JsonSerializable(explicitToJson: true)
class StockModel extends Stock {
  const StockModel({
    required super.id,
    required super.name,
    required super.sku,
    required super.quantity,
    required super.status,
    required super.durabilityType,

    super.description,
    super.categoryId,
    super.supplierId,
    super.unit,
    super.location,

    super.minimumStock,
    super.maximumStock,

    super.averageDailyUsage,
    super.leadTimeDays,
    super.safetyStock,
    super.reorderPoint,
    super.preferredReorderQuantity,

    super.price,
    super.costPrice,

    required super.createdAt,
    required super.updatedAt,

    super.expiryDate,
    super.lastSoldDate,
    super.deadstockThreshold,

    super.warehouseStock,
    super.movementHistory,
    super.tags,
  });

  factory StockModel.fromJson(Map<String, dynamic> json) =>
      _$StockModelFromJson(json);

  Map<String, dynamic> toJson() => _$StockModelToJson(this);

  /// Map to domain entity
  @override
  Stock toEntity() => Stock(
    id: id,
    name: name,
    sku: sku,
    quantity: quantity,
    status: status,
    durabilityType: durabilityType,
    description: description,
    categoryId: categoryId,
    supplierId: supplierId,
    unit: unit,
    location: location,
    minimumStock: minimumStock,
    maximumStock: maximumStock,
    averageDailyUsage: averageDailyUsage,
    leadTimeDays: leadTimeDays,
    safetyStock: safetyStock,
    reorderPoint: reorderPoint,
    preferredReorderQuantity: preferredReorderQuantity,
    price: price,
    costPrice: costPrice,
    createdAt: createdAt,
    updatedAt: updatedAt,
    expiryDate: expiryDate,
    lastSoldDate: lastSoldDate,
    deadstockThreshold: deadstockThreshold,
    warehouseStock: warehouseStock,
    movementHistory: movementHistory,
    tags: tags,
  );

  /// Create from domain entity
  static StockModel fromDomain(Stock ent) => StockModel(
    id: ent.id,
    name: ent.name,
    sku: ent.sku,
    quantity: ent.quantity,
    status: ent.status,
    durabilityType: ent.durabilityType,
    description: ent.description,
    categoryId: ent.categoryId,
    supplierId: ent.supplierId,
    unit: ent.unit,
    location: ent.location,
    minimumStock: ent.minimumStock,
    maximumStock: ent.maximumStock,
    averageDailyUsage: ent.averageDailyUsage,
    leadTimeDays: ent.leadTimeDays,
    safetyStock: ent.safetyStock,
    reorderPoint: ent.reorderPoint,
    preferredReorderQuantity: ent.preferredReorderQuantity,
    price: ent.price,
    costPrice: ent.costPrice,
    createdAt: ent.createdAt,
    updatedAt: ent.updatedAt,
    expiryDate: ent.expiryDate,
    lastSoldDate: ent.lastSoldDate,
    deadstockThreshold: ent.deadstockThreshold,
    warehouseStock: ent.warehouseStock,
    movementHistory: ent.movementHistory,
    tags: ent.tags,
  );
}
