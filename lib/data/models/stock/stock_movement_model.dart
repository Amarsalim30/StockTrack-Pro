// GENERATED BY AMAR SCRIPT â€“ EDIT MODEL
import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';
import '../../../domain/entities/stock/stock_movement.dart';

part 'stock_movement_model.g.dart';
@JsonSerializable()
class StockMovementModel extends Equatable {
  final String id;
  final String stockId;
  final MovementType type;
  final int quantity;
  final String? reason;
  final String? referenceId;
  final String? performedByUserId;
  final String? fromLocation;
  final String? toLocation;
  final DateTime timestamp;

  const StockMovementModel({
    required this.id,
    required this.stockId,
    required this.type,
    required this.quantity,
    this.reason,
    this.referenceId,
    this.performedByUserId,
    this.fromLocation,
    this.toLocation,
    required this.timestamp,
  });

  factory StockMovementModel.fromJson(Map<String, dynamic> json) =>
      _$StockMovementModelFromJson(json);

  Map<String, dynamic> toJson() => _$StockMovementModelToJson(this);

  StockMovement toDomain() => StockMovement(
    id: id,
    stockId: stockId,
    type: type,
    quantity: quantity,
    reason: reason,
    referenceId: referenceId,
    performedByUserId: performedByUserId,
    fromLocation: fromLocation,
    toLocation: toLocation,
    timestamp: timestamp,
  );

  static StockMovementModel fromDomain(StockMovement ent) => StockMovementModel(
    id: ent.id,
    stockId: ent.stockId,
    type: ent.type,
    quantity: ent.quantity,
    reason: ent.reason,
    referenceId: ent.referenceId,
    performedByUserId: ent.performedByUserId,
    fromLocation: ent.fromLocation,
    toLocation: ent.toLocation,
    timestamp: ent.timestamp,
  );

  StockMovementModel copyWith({
    String? id,
    String? stockId,
    MovementType? type,
    int? quantity,
    String? reason,
    String? referenceId,
    String? performedByUserId,
    String? fromLocation,
    String? toLocation,
    DateTime? timestamp,
  }) {
    return StockMovementModel(
      id: id ?? this.id,
      stockId: stockId ?? this.stockId,
      type: type ?? this.type,
      quantity: quantity ?? this.quantity,
      reason: reason ?? this.reason,
      referenceId: referenceId ?? this.referenceId,
      performedByUserId: performedByUserId ?? this.performedByUserId,
      fromLocation: fromLocation ?? this.fromLocation,
      toLocation: toLocation ?? this.toLocation,
      timestamp: timestamp ?? this.timestamp,
    );
  }

  @override
  List<Object?> get props => [id, stockId, type, quantity, timestamp, reason];
}
