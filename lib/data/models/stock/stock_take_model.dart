// GENERATED BY AMAR SCRIPT â€“ EDIT MODEL
import 'package:clean_arch_app/domain/entities/stock/stock_take_item.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:equatable/equatable.dart';
import '../../../domain/entities/stock/stock_take.dart';

part 'stock_take_model.g.dart';

@JsonSerializable(explicitToJson: true)
class StockTakeModel extends Equatable {
  final String id;
  final String name;
  final String? description;
  final DateTime startDate;
  final DateTime? endDate;
  final StockTakeStatus status;
  final String createdBy;
  final List<String> assignedTo;
  final String? locationId;
  final List<String>? categoryFilters;
  final int totalItems;
  final int countedItems;
  final int discrepancies;
  final Map<String, dynamic>? metadata;


  const StockTakeModel({
    required this.id,
    required this.name,
    this.description,
    required this.startDate,
    this.endDate,
    required this.status,
    required this.createdBy,
    required this.assignedTo,
    this.locationId,
    this.categoryFilters,
    required this.totalItems,
    required this.countedItems,
    required this.discrepancies,
    this.metadata,

  });

  factory StockTakeModel.fromJson(Map<String, dynamic> json) =>
      _$StockTakeModelFromJson(json);

  Map<String, dynamic> toJson() => _$StockTakeModelToJson(this);

  /// Map to domain entity
  StockTake toEntity() =>
      StockTake(
        id: id,
        name: name,
        description: description,
        startDate: startDate,
        endDate: endDate,
        status: status,
        createdBy: createdBy,
        assignedTo: assignedTo,
        locationId: locationId,
        categoryFilters: categoryFilters,
        totalItems: totalItems,
        countedItems: countedItems,
        discrepancies: discrepancies,
        metadata: metadata,

      );

  static StockTakeModel fromDomain(StockTake ent) => StockTakeModel(
    id: ent.id,
    name: ent.name,
    description: ent.description,
    startDate: ent.startDate,
    endDate: ent.endDate,
    status: ent.status,
    createdBy: ent.createdBy,
    assignedTo: ent.assignedTo,
    locationId: ent.locationId,
    categoryFilters: ent.categoryFilters,
    totalItems: ent.totalItems,
    countedItems: ent.countedItems,
    discrepancies: ent.discrepancies,
    metadata: ent.metadata,

  );

  @override
  List<Object?> get props =>
      [
        id, name, description, startDate, endDate, status,
        createdBy, assignedTo, locationId, categoryFilters,
        totalItems, countedItems, discrepancies, metadata,
      ];
}

@JsonSerializable()
class StockTakeItemModel extends Equatable {
  final String id;
  final String stockTakeId;
  final String productId;
  final String productName;
  final String productCode;
  final int systemQuantity;
  final int? countedQuantity;
  final CountMethod? countMethod;
  final String? countedBy;
  final DateTime? countedAt;
  final String? notes;
  final List<String>? photoUrls;
  final bool isCounted;
  final bool hasDiscrepancy;
  final DateTime createdAt;
  final DateTime updatedAt;

  const StockTakeItemModel({
    required this.id,
    required this.stockTakeId,
    required this.productId,
    required this.productName,
    required this.productCode,
    required this.systemQuantity,
    this.countedQuantity,
    this.countMethod,
    this.countedBy,
    this.countedAt,
    this.notes,
    this.photoUrls,
    required this.isCounted,
    required this.hasDiscrepancy,
    required this.createdAt,
    required this.updatedAt,
  });

  factory StockTakeItemModel.fromJson(Map<String, dynamic> json) =>
      _$StockTakeItemModelFromJson(json);

  Map<String, dynamic> toJson() => _$StockTakeItemModelToJson(this);

  /// Map to domain entity
  StockTakeItem toEntity() =>
      StockTakeItem(
        id: id,
        stockTakeId: stockTakeId,
        productId: productId,
        productName: productName,
        productCode: productCode,
        systemQuantity: systemQuantity,
        countedQuantity: countedQuantity,
        countMethod: countMethod,
        countedBy: countedBy,
        countedAt: countedAt,
        notes: notes,
        photoUrls: photoUrls,
        createdAt: createdAt,
        updatedAt: updatedAt,
      );

  static StockTakeItemModel fromDomain(StockTakeItem ent) => StockTakeItemModel(
    id: ent.id,
    stockTakeId: ent.stockTakeId,
    productId: ent.productId,
    productName: ent.productName,
    productCode: ent.productCode,
    systemQuantity: ent.systemQuantity,
    countedQuantity: ent.countedQuantity,
    countMethod: ent.countMethod,
    countedBy: ent.countedBy,
    countedAt: ent.countedAt,
    notes: ent.notes,
    photoUrls: ent.photoUrls,
    isCounted: ent.isCounted,
    hasDiscrepancy: ent.hasDiscrepancy,
    createdAt: ent.createdAt,
    updatedAt: ent.updatedAt,
  );

  @override
  List<Object?> get props =>
      [
        id, stockTakeId, productId, productName, productCode,
        systemQuantity, countedQuantity, countMethod, countedBy,
        countedAt, notes, photoUrls, isCounted, hasDiscrepancy,
        createdAt, updatedAt
      ];
}
