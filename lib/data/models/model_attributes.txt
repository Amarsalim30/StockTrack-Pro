Model: ActivityModel
- id: String
- action: String
- entityType: String
- entityId: String
- userId: String
- userName: String?
- type: ActivityType?
- description: String?
- timestamp: DateTime
- metadata: dynamic>

Model: ApprovalRequestModel
- id: String
- entityType: String
- entityId: String
- requestedBy: String
- approvedBy: String?
- requestedAt: DateTime
- approvedAt: DateTime?
- status: String
- reason: String?

Model: AuditLogModel
- id: String
- action: String
- performedBy: String
- performedAt: DateTime
- details: dynamic>
- props: get

Enum: PermissionTypeModel
- @JsonValue('createOrder')
- createOrder
- @JsonValue('approveOrder')
- approveOrder
- @JsonValue('receiveStock')
- receiveStock
- @JsonValue('adjustStock')
- adjustStock
- @JsonValue('viewReports')
- viewReports
- @JsonValue('processReturns')
- processReturns
- @JsonValue('createProduct')
- createProduct
- @JsonValue('editProduct')
- editProduct
- @JsonValue('deleteProduct')
- deleteProduct
- // Add additional permissions here...

Model: RoleModel
- id: String
- name: String
- permissions: List<PermissionTypeModel>
- props: get

Model: UserModel
- id: String
- username: String
- email: String
- roles: List<RoleModel>
- isActive: bool
- permissionModel: final
- props: get

Model: BillOfMaterialsModel
- productId: String
- components: List<BomItemModel>
- yieldPerRun: int
- scrapPercent: double
- props: get

Model: BomItemModel
- rawMaterialId: String
- quantityPerUnit: int
- props: get

Model: CategoryModel
- id: String
- name: String
- description: String?
- parentCategoryId: String?
- props: get

Model: ProductModel
- id: String
- name: String
- sku: String
- description: String?
- categoryId: String
- supplierId: String
- price: double?
- costPrice: double?
- tags: List<String>?

Model: SupplierModel
- id: String
- name: String
- contactInfo: String>?
- rating: double?
- paymentTerms: String?
- props: get

Model: ProductionOrderStatusModelConverter

Model: LocationModel
- id: String
- name: String
- description: String?
- latitude: double?
- longitude: double?
- props: get

Model: NotificationModel
- id: String
- userId: String
- title: String
- message: String
- read: bool
- createdAt: DateTime
- props: get

Model: UnitModel
- id: String
- name: String
- description: String?
- conversionRate: double?
- props: get

Model: GoodsReceiptItemModel
- stockId: String
- quantityReceived: int
- unitPrice: double
- totalPrice: double
- expiryDate: DateTime?
- notes: String?

Model: GoodsReceiptModel
- id: String
- purchaseOrderId: String
- receivedByUserId: String
- createdAt: DateTime
- receivedAtDate: DateTime?
- items: List<GoodsReceiptItemModel>
- status: String
- attachments: List<String>
- notes: String?

Model: PurchaseOrderDraftModel
- id: String
- supplierId: String
- createdByUserId: String
- createdAt: DateTime
- items: List<PurchaseOrderItemModel>
- notes: String?
- autoGenerated: bool

Model: PurchaseOrderItemModel
- stockId: String
- quantityOrdered: int
- quantityReceived: int?
- unitCost: double?

Model: PurchaseOrderModel
- id: String
- supplierId: String
- createdByUserId: String
- approvedByUserId: String?
- goodsReceiptId: String?
- invoiceId: String?
- totalAmount: double
- attachments: List<String>?
- createdAt: DateTime
- expectedDeliveryDate: DateTime?
- receivedDate: DateTime?
- status: String
- items: List<PurchaseOrderItemModel>
- notes: String?

Model: ReturnOrderItemModel
- stockId: String
- quantity: int
- reason: String?
- props: get

Model: ReturnOrderModel
- id: String
- originalOrderId: String
- requestedByUserId: String
- requestedAt: DateTime
- type: ReturnTypeModel
- approvedByUserId: String?
- processedAt: DateTime?
- status: String
- items: List<ReturnOrderItemModel>
- notes: String?

Enum: ReturnTypeModel
- @JsonValue('supplier')
- supplier
- @JsonValue('customer')
- customer
- @JsonValue('warranty')
- warranty

Model: VendorInvoiceModel
- id: String
- purchaseOrderId: String
- invoiceNumber: String
- supplierId: String
- invoiceDate: DateTime
- dueDate: DateTime?
- totalAmount: double
- status: String
- attachments: List<String>?
- notes: String?

Model: ProductionOrderModel
- id: String
- productId: String
- quantityToProduce: int
- status: ProductionOrderStatusModel
- createdAt: DateTime
- startedAt: DateTime?
- completedAt: DateTime?

Enum: ProductionOrderStatusModel
- pending('pending')
- inProgress('inProgress')
- completed('completed')
- cancelled('cancelled')
- paused('paused');
- final String name;
- const ProductionOrderStatusModel(this.name);
- @override
- String toString() => name;
- static ProductionOrderStatusModel fromString(String value) {
- return ProductionOrderStatusModel.values.firstWhere(
- (e) => e.name == value
- orElse: () => ProductionOrderStatusModel.pending
- );

Model: ScrapRecordModel
- productionOrderId: String
- rawMaterialId: String
- wastedQuantity: int
- reason: String

Model: ExpiryReportModel
- stockId: String
- name: String
- expiryDate: DateTime
- daysToExpiry: int
- quantity: int

Model: ReorderReportModel
- stockId: String
- name: String
- quantity: int
- minimumStock: int
- needsReorder: bool

Model: ReportModel
- reportId: String
- type: String
- generatedAt: DateTime
- items: List<T>
- props: get

Model: StockMovementReportModel
- movementId: String
- stockId: String
- type: String
- quantity: int
- performedBy: String
- timestamp: DateTime
- reason: String?

Model: StockOutReportModel
- stockId: String
- name: String
- quantityOut: int
- dateOut: DateTime
- performedBy: String
- reason: String?

Model: CustomerModel
- id: String
- name: String
- email: String?
- phone: String?
- loyaltyId: String?
- props: get

Model: SalesOrderItemModel
- stockId: String
- quantity: int
- unitPrice: double
- props: get

Model: SalesOrderModel
- id: String
- customerId: String
- createdByUserId: String
- createdAt: DateTime
- status: String
- items: List<SalesOrderItemModel>
- totalAmount: double
- notes: String?

Model: SalesReturnModel
- id: String
- salesOrderId: String
- returnedByUserId: String
- returnedAt: DateTime
- items: List<SalesOrderItemModel>
- refundAmount: double
- reason: String?
- status: String

Model: AppSettingsModel
- featureToggles: List<FeatureToggleModel>
- productionSettings: ProductionSettingsModel
- reorderSettings: ReorderWorkflowSettingsModel
- stockTakeSettings: StockTakeSettingsModel
- exportImportSettings: ExportImportSettingsModel
- passwordPolicy: PasswordPolicyModel
- supplierSupport: SupplierSupportSettingsModel
- expiryDuration: Duration?
- days: >

Model: ExportImportSettingsModel
- exportEnabled: bool
- importEnabled: bool
- importValidationRules: dynamic>?

Model: FeatureToggleModel
- featureKey: String
- enabled: bool
- config: dynamic>?
- props: get

Model: PasswordPolicyModel
- minLength: int
- requireUppercase: bool
- requireNumbers: bool
- requireSpecialChars: bool
- expiryDuration: Duration?

Model: ProductionSettingsModel
- allowReservation: bool
- autoConsumeOnComplete: bool
- defaultYieldPerRun: int

Model: ReorderWorkflowSettingsModel
- autoReorderEnabled: bool
- reorderPointMultiplier: int
- maxPendingOrders: int

Model: StockTakeSettingsModel
- gpsEnforced: bool
- maxDistanceMeters: double?
- allowedLocations: List<String>?
- props: get

Model: SupplierSupportSettingsModel
- enabled: bool
- supplierRoles: List<String>?
- config: dynamic>?
- props: get

Model: AdjustmentModel
- id: String
- stockId: String
- quantityChange: int
- reason: String
- performedByUserId: String
- timestamp: DateTime

Model: StockBatchModel
- batchId: String
- stockId: String
- quantity: int
- manufactureDate: DateTime
- expiryDate: DateTime?

Model: StockModel
- id: String
- name: String
- sku: String
- quantity: int
- status: StockStatus
- durabilityType: StockDurabilityType
- description: String?
- categoryId: String?
- supplierId: String?
- unit: String?
- location: String?
- minimumStock: int?
- maximumStock: int?
- averageDailyUsage: int?
- leadTimeDays: int?
- safetyStock: int?
- reorderPoint: int?
- preferredReorderQuantity: int?
- price: double?
- costPrice: double?
- createdAt: DateTime
- updatedAt: DateTime
- expiryDate: DateTime?
- lastSoldDate: DateTime?
- deadstockThreshold: Duration?
- warehouseStock: int>?
- movementHistory: List<StockMovement>?
- tags: List<String>?
- false: return
- false: return
- days: >
- null: return
- null: return

Model: StockMovementModel
- id: String
- stockId: String
- type: MovementTypeModel
- quantity: int
- reason: String?
- referenceId: String?
- performedByUserId: String?
- fromLocation: String?
- toLocation: String?
- timestamp: DateTime
- props: get

Enum: MovementTypeModel
- inbound
- outbound
- adjustment
- // Add more types as needed

Model: StockTakeModel
- id: String
- name: String
- description: String?
- startDate: DateTime
- endDate: DateTime?
- status: StockTakeStatus
- createdBy: String
- assignedTo: List<String>
- locationId: String?
- categoryFilters: List<String>?
- totalItems: int
- countedItems: int
- discrepancies: int
- metadata: dynamic>?

Model: StockTakeItemModel
- id: String
- stockTakeId: String
- productId: String
- productName: String
- productCode: String
- systemQuantity: int
- countedQuantity: int?
- countMethod: CountMethod?
- countedBy: String?
- countedAt: DateTime?
- notes: String?
- photoUrls: List<String>?
- isCounted: bool
- hasDiscrepancy: bool
- createdAt: DateTime
- updatedAt: DateTime

